# app/bot/main.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ò –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import os
import re
import asyncio
import logging
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    CommandHandler,
    filters,
)

# –ò–º–ø–æ—Ä—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
from bot.handlers import (
    handle_balance,
    handle_figi_message,
    handle_buy,
    handle_sell,
    handle_positions,
    handle_close_all,
)

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
from bot.handlers.settings_handler import handle_settings_command, handle_set

# –ù–û–í–´–ô –ò–ú–ü–û–†–¢: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø—Ä–∞–≤–∫–∏
from bot.handlers.help_handler import handle_help_command, handle_help_message

# –¢–æ—Ä–≥–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
from trading.order_executor import OrderExecutor
from trading.order_watcher import OrderWatcher

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=True)
    try:
        message = update.message or update.channel_post
        if message:
            await message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ error_handler: {str(e)}")

def setup_handlers(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    
    # ========== –ö–û–ú–ê–ù–î–´ (/command) ==========
    application.add_handler(CommandHandler("help", handle_help_command))
    application.add_handler(CommandHandler("start", handle_help_command))  # start —Ç–æ–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É
    
    # ========== –°–ü–†–ê–í–ö–ê ==========
    application.add_handler(MessageHandler(
        filters.TEXT & filters.Regex(re.compile(r"^help$", re.IGNORECASE)),
        handle_help_message,
    ))
    
    # ========== –ë–ê–õ–ê–ù–° ==========
    application.add_handler(MessageHandler(
        filters.TEXT & filters.Regex(re.compile(r"^(–±–∞–ª–∞–Ω—Å|balance)$", re.IGNORECASE)),
        handle_balance,
    ))

    # ========== FIGI ==========
    application.add_handler(MessageHandler(
        filters.TEXT & filters.Regex(re.compile(r"^figi\s+\w+", re.IGNORECASE)),
        handle_figi_message,
    ))

    # ========== –ü–û–ó–ò–¶–ò–ò ==========
    application.add_handler(MessageHandler(
        filters.TEXT & filters.Regex(re.compile(r"^(—Å–æ—Å—Ç–æ—è–Ω–∏–µ|positions|status)$", re.IGNORECASE)),
        handle_positions,
    ))

    # ========== –ó–ê–ö–†–´–¢–¨ –í–°–Å ==========
    application.add_handler(MessageHandler(
        filters.TEXT & filters.Regex(re.compile(
            r"^(–∑–∞–∫—Ä—ã—Ç—å –≤—Å—ë|–∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ|–∑–∞–≤–µ—Ä—à–∏—Ç—å|—É–π—Ç–∏ –≤ –∫—ç—à|—Å—ç–π–≤|save|close all|exit all|liquidate|"
            r"—Å—Ç–æ–ø –≤—Å—ë|—Å—Ç–æ–ø –≤—Å–µ|–≤—ã—Ö–æ–¥|—ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –≤—ã—Ö–æ–¥|–ø–∞–Ω–∏–∫–∞|panic|emergency exit|"
            r"–∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏–∏|—Å–Ω—è—Ç—å –≤—Å–µ|–æ—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ|cancel all)$",
            re.IGNORECASE,
        )),
        handle_close_all,
    ))

    # ========== –¢–û–†–ì–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò ==========
    # –ü–æ–∫—É–ø–∫–∞
    application.add_handler(MessageHandler(
        filters.TEXT & filters.Regex(re.compile(r"^buy\s+\w+", re.IGNORECASE)),
        handle_buy,
    ))

    # –ü—Ä–æ–¥–∞–∂–∞
    application.add_handler(MessageHandler(
        filters.TEXT & filters.Regex(re.compile(r"^sell\s+\w+", re.IGNORECASE)),
        handle_sell,
    ))

    # ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
    # –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    application.add_handler(MessageHandler(
        filters.TEXT & filters.Regex(re.compile(r"^(settings|–Ω–∞—Å—Ç—Ä–æ–π–∫–∏)$", re.IGNORECASE)),
        handle_settings_command,
    ))

    # –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ä–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –≤—Å–µ—Ö set –∫–æ–º–∞–Ω–¥)
    application.add_handler(MessageHandler(
        filters.TEXT & filters.Regex(re.compile(
            r"^set\s+(risk|sl|tp|multi|auto)", re.IGNORECASE
        )),
        handle_set,
    ))

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv("BOT_TOKEN")
    tinkoff_token = os.getenv("TINKOFF_TOKEN")
    account_id = os.getenv("ACCOUNT_ID")
    chat_id = os.getenv("TG_CHAT_ID")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if not token:
        raise ValueError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN")
    if not tinkoff_token or not account_id:
        raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã TINKOFF_TOKEN –∏–ª–∏ ACCOUNT_ID")

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = ApplicationBuilder().token(token).build()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    setup_handlers(application)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    executor = OrderExecutor(tinkoff_token, account_id)
    watcher = OrderWatcher(
        tinkoff_token,
        account_id,
        executor,
        tg_bot=application.bot,
        chat_id=chat_id,
    )

    # –ó–∞–ø—É—Å–∫ OrderWatcher –≤ —Ñ–æ–Ω–µ
    loop = asyncio.get_event_loop()
    loop.create_task(watcher.watch_trades())

    logger.info("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:")
    logger.info("  üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–ª–∞–Ω—Å–∞ –∏ –ø–æ–∑–∏—Ü–∏–π")
    logger.info("  üíπ –¢–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (buy/sell)")
    logger.info("  ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (—Ä–∏—Å–∫–∏, SL, TP)")
    logger.info("  üéØ –ú—É–ª—å—Ç–∏-TP —Å–∏—Å—Ç–µ–º–∞")
    logger.info("  ‚è∞ –ê–≤—Ç–æ-–ª–∏–∫–≤–∏–¥–∞—Ü–∏—è")
    logger.info("  ‚ùì –°–ø—Ä–∞–≤–∫–∞ (/help)")
    
    # –ó–∞–ø—É—Å–∫ polling
    application.run_polling()

if __name__ == "__main__":
    main()