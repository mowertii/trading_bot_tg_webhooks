# app/bot/handlers/trade_handlers.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
from telegram import Update
from telegram.ext import ContextTypes
import os
import logging
import asyncio
from decimal import Decimal
from trading.tinkoff_client import TinkoffClient, Position 
from trading.order_executor import OrderExecutor
from trading.settings_manager import get_settings

logger = logging.getLogger(__name__)
settings = get_settings()

class TradeError(Exception):
    pass

async def _process_trade_command(update: Update, context: ContextTypes.DEFAULT_TYPE, action: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂–∏ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    try:
        message = update.message or update.channel_post
        if not message or not message.text:
            return

        instrument = message.text.split()[1].upper()
        logger.info(f"Processing {action.upper()} command for {instrument}")

        tinkoff_token = os.getenv("TINKOFF_TOKEN")
        account_id = os.getenv("ACCOUNT_ID")
        
        client = TinkoffClient(tinkoff_token, account_id)
        executor = OrderExecutor(tinkoff_token, account_id)

        figi = await client.get_figi(instrument)
        if not figi:
            await message.reply_text(f"‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {instrument} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        await message.reply_text(f"üîÑ –ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ {action.upper()} –¥–ª—è {instrument}...")

        positions = await client.get_positions_async()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –ª–æ–≥–∏–∫—É –∏ –ø–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if action == 'buy':
            risk_percent = Decimal(settings.risk_long_percent) / Decimal(100)
            result = await _handle_trade_logic(
                client=client,
                executor=executor,
                figi=figi,
                instrument=instrument,
                positions=positions,
                direction='long',
                risk_percent=risk_percent  # 40% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ª–æ–Ω–≥–∞
            )
        elif action == 'sell':
            result = await _handle_trade_logic(
                client=client,
                executor=executor,
                figi=figi,
                instrument=instrument,
                positions=positions,
                direction='short',
                risk_percent=Decimal('0.3')  # 30% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —à–æ—Ä—Ç–∞
            )
        else:
            await message.reply_text(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        if result['success']:
            await message.reply_text(
                f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è {action.upper()} –¥–ª—è {instrument} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n"
                f"üìä –î–µ—Ç–∞–ª–∏: {result['details']}"
            )
        else:
            await message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {action.upper()} –¥–ª—è {instrument}:\n"
                f"üîç –ü—Ä–∏—á–∏–Ω–∞: {result['error']}"
            )

    except TradeError as e:
        await message.reply_text(f"‚ö†Ô∏è {str(e)}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ _process_trade_command: {str(e)}", exc_info=True)
        await message.reply_text(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏: {str(e)}")

async def _handle_trade_logic(
    client: TinkoffClient,
    executor: OrderExecutor,
    figi: str,
    instrument: str,
    positions: list[Position],
    direction: str,
    risk_percent: Decimal
) -> dict:
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: {'success': bool, 'details': str, 'error': str}
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        opposite_direction = 'short' if direction == 'long' else 'long'
        opposite_pos = next(
            (p for p in positions 
             if p.ticker == instrument 
             and p.direction == opposite_direction),
            None
        )
        
        result_details = []
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        if opposite_pos:
            logger.info(f"Closing {opposite_pos.direction} position: {opposite_pos.lots} lots")
            close_result = await executor.execute_smart_order(
                figi=figi,
                desired_direction=opposite_pos.direction,
                amount=Decimal(opposite_pos.lots),
                close_only=True
            )
            
            if close_result.success:
                result_details.append(f"–ó–∞–∫—Ä—ã—Ç–∞ {opposite_pos.direction} –ø–æ–∑–∏—Ü–∏—è: {opposite_pos.lots} –ª–æ—Ç–æ–≤")
            else:
                return {
                    'success': False, 
                    'error': f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å {opposite_pos.direction} –ø–æ–∑–∏—Ü–∏—é: {close_result.message}",
                    'details': ""
                }
            
            await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
        balance = await client.get_balance_async()
        if balance <= 0:
            return {
                'success': False,
                'error': "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ",
                'details': f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.2f} RUB"
            }

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–∏
        operation_amount = balance * risk_percent
        result_details.append(f"–ë–∞–ª–∞–Ω—Å: {balance:.2f} RUB, —Ä–∏—Å–∫: {risk_percent*100:.1f}%")
        result_details.append(f"–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation_amount:.2f} RUB")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        main_result = await executor.execute_smart_order(
            figi=figi,
            desired_direction=direction,
            amount=operation_amount
        )
        
        if main_result.success:
            result_details.append(f"–°—Ç–∞—Ç—É—Å: {main_result.message}")
            return {
                'success': True,
                'details': "\n".join(result_details),
                'error': ""
            }
        else:
            return {
                'success': False,
                'error': main_result.message,
                'details': "\n".join(result_details)
            }

    except Exception as e:
        logger.error(f"Trade error ({direction}): {str(e)}", exc_info=True)
        return {
            'success': False,
            'error': f"–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ {direction} –æ–ø–µ—Ä–∞—Ü–∏–∏: {str(e)}",
            'details': ""
        }

async def handle_buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∫—É–ø–∫–∏"""
    await _process_trade_command(update, context, 'buy')

async def handle_sell(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–¥–∞–∂–∏"""
    await _process_trade_command(update, context, 'sell')