# app/bot/handlers/close_all_handler.py
from telegram import Update
from telegram.ext import ContextTypes
from trading.tinkoff_client import TinkoffClient
from trading.order_executor import OrderExecutor
import os
import logging
import asyncio

logger = logging.getLogger(__name__)

class CloseAllError(Exception):
    pass

async def handle_close_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –∏ —Å–Ω—è—Ç–∏—è –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
    message = update.message or update.channel_post
    if not message:
        return

    try:
        await message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –∏ —Å–Ω—è—Ç–∏–µ –æ—Ä–¥–µ—Ä–æ–≤...")
        
        tinkoff_token = os.getenv("TINKOFF_TOKEN")
        account_id = os.getenv("ACCOUNT_ID")
        
        client = TinkoffClient(tinkoff_token, account_id)
        executor = OrderExecutor(tinkoff_token, account_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        positions = await client.get_positions_async()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è: {len(positions)}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
        closed_count = 0
        for pos in positions:
            try:
                logger.info(f"–ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é: {pos.ticker} ({pos.direction}) - {pos.lots} –ª–æ—Ç–æ–≤")
                result = await executor.execute_smart_order(
                    figi=pos.figi,
                    desired_direction=pos.direction,
                    amount=0,  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ close_only=True
                    close_only=True
                )
                
                if result.success:
                    closed_count += 1
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {pos.ticker}: {result.message}")
                    
                await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–∫—Ä—ã—Ç–∏—è–º–∏
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {pos.ticker}: {str(e)}")
                await message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {pos.ticker}: {str(e)}")
        
        # –°–Ω–∏–º–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ (–∫–∞–∫ –ª–∏–º–∏—Ç–Ω—ã–µ, —Ç–∞–∫ –∏ —Å—Ç–æ–ø-–æ—Ä–¥–µ—Ä–∞)
        try:
            cancelled = await executor.cancel_all_orders()
            limit_cancelled = cancelled["limit_orders"]
            stop_cancelled = cancelled["stop_orders"]
            
            logger.info(f"–û—Ç–º–µ–Ω–µ–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: –ª–∏–º–∏—Ç–Ω—ã—Ö={limit_cancelled}, —Å—Ç–æ–ø={stop_cancelled}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–æ–≤: {str(e)}")
            limit_cancelled = 0
            stop_cancelled = 0
            await message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–æ–≤: {str(e)}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        summary_lines = [
            "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
            "",
            f"üìä –ó–∞–∫—Ä—ã—Ç–æ –ø–æ–∑–∏—Ü–∏–π: {closed_count}",
            f"üö´ –û—Ç–º–µ–Ω–µ–Ω–æ –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {limit_cancelled}",
            f"üõë –û—Ç–º–µ–Ω–µ–Ω–æ —Å—Ç–æ–ø-–æ—Ä–¥–µ—Ä–æ–≤: {stop_cancelled}"
        ]
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
        try:
            final_balance = await client.get_balance_async()
            summary_lines.append(f"üí∞ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {final_balance:.2f} RUB")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞: {str(e)}")
            summary_lines.append("üí∞ –ë–∞–ª–∞–Ω—Å: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è")
        
        await message.reply_text("\n".join(summary_lines))
        logger.info(f"Close all completed: positions={closed_count}, limits={limit_cancelled}, stops={stop_cancelled}")
        
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ handle_close_all: {str(e)}", exc_info=True)
        await message.reply_text(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")