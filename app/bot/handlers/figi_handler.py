from telegram import Update, Message
from telegram.ext import ContextTypes
from telegram.helpers import escape_markdown
from tinkoff.invest import AsyncClient, InstrumentShort
import os
import logging

logger = logging.getLogger(__name__)

async def handle_figi_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        message = update.message or update.channel_post
        if not message or not message.text:
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã figi
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            await message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞")
            return

        instrument_name = parts[1].strip()
        await process_figi_request(message, instrument_name)

    except Exception as e:
        logger.error(f"Error: {str(e)}", exc_info=True)
        await message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

async def process_figi_request(message: Message, instrument_name: str):
    try:
        token = os.getenv("TINKOFF_TOKEN")
        if not token:
            logger.error("TINKOFF_TOKEN not configured!")
            await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return

        async with AsyncClient(token) as client:
            # –ò—â–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            response = await client.instruments.find_instrument(query=instrument_name)
            
            if not response.instruments:
                await message.reply_text(f"‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç '{escape_markdown(instrument_name, version=2)}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—è
            instrument = response.instruments[0]
            safe_data = {
                'name': escape_markdown(instrument.name, version=2),
                'figi': escape_markdown(instrument.figi, version=2),
                'ticker': escape_markdown(instrument.ticker, version=2)
            }

            response_text = (
                f"üîç *{safe_data['name']}*\n"
                f"FIGI: \`{safe_data['figi']}\`\n"
                f"–¢–∏–∫–µ—Ä: {safe_data['ticker']}"
            )
            
            await message.reply_text(response_text, parse_mode='MarkdownV2')

    except Exception as e:
        logger.error(f"API Error: {str(e)}", exc_info=True)
        await message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—Ä–æ–∫–µ—Ä—É")
