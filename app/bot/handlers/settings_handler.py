# app/bot/handlers/settings_handler.py - –í–ï–†–°–ò–Ø —Å –º—É–ª—å—Ç–∏-TP –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
from telegram import Update
from telegram.ext import ContextTypes
import logging
import re

from trading.settings_manager import get_settings, update_settings

logger = logging.getLogger(__name__)

HELP_TEXT = (
    "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*\n\n"
    "*–¢–æ—Ä–≥–æ–≤–ª—è:*\n"
    "‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å: `settings`\n"
    "‚Ä¢ –†–∏—Å–∫ (–ª–æ–Ω–≥/—à–æ—Ä—Ç): `set risk 40/30`\n"
    "‚Ä¢ –¢–æ–ª—å–∫–æ –ª–æ–Ω–≥: `set risk long 35`\n"
    "‚Ä¢ –¢–æ–ª—å–∫–æ —à–æ—Ä—Ç: `set risk short 25`\n"
    "‚Ä¢ –°—Ç–æ–ø-–ª–æ—Å—Å: `set sl 0.7` (–≤ %)\n"
    "‚Ä¢ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: `set tp 9` (–≤ %)\n\n"
    "*–ú—É–ª—å—Ç–∏-TP:*\n"
    "‚Ä¢ –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å: `set multi on/off`\n"
    "‚Ä¢ –£—Ä–æ–≤–Ω–∏ TP: `set tp levels 0.5,1.0,1.6`\n"
    "‚Ä¢ –î–æ–ª–∏ –ø–æ–∑–∏—Ü–∏–π: `set tp portions 33,33,34`\n\n"
    "*–ê–≤—Ç–æ-–ª–∏–∫–≤–∏–¥–∞—Ü–∏—è:*\n"
    "‚Ä¢ –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å: `set auto on/off`\n"
    "‚Ä¢ –í—Ä–µ–º—è: `set auto time 21:30`\n"
    "‚Ä¢ –û–∫–Ω–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: `set auto block 45` (–º–∏–Ω)\n"
    "‚Ä¢ –î–Ω–∏ –Ω–µ–¥–µ–ª–∏: `set auto days 0,1,2,3,4` (0=–ü–Ω)"
)

def _fmt_settings():
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ Telegram"""
    s = get_settings()
    days_names = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    active_days = ", ".join([days_names[d] for d in s.auto_liquidation_days])
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º—É–ª—å—Ç–∏-TP –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    multi_tp_status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if s.use_multi_tp else "‚ùå –í—ã–∫–ª—é—á–µ–Ω"
    tp_levels_str = ", ".join([f"{tp:.1f}%" for tp in s.tp_levels])
    tp_portions_str = ", ".join([f"{int(p*100)}%" for p in s.tp_portions])
    
    return (
        f"üîß *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n\n"
        f"*–¢–æ—Ä–≥–æ–≤–ª—è:*\n"
        f"‚Ä¢ Risk LONG: `{s.risk_long_percent:.1f}%`\n"
        f"‚Ä¢ Risk SHORT: `{s.risk_short_percent:.1f}%`\n"
        f"‚Ä¢ Stop-Loss: `{s.stop_loss_percent:.2f}%`\n"
        f"‚Ä¢ Take-Profit: `{s.take_profit_percent:.1f}%` (–±–∞–∑–æ–≤—ã–π)\n\n"
        f"*–ú—É–ª—å—Ç–∏-TP:*\n"
        f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {multi_tp_status}\n"
        f"‚Ä¢ –£—Ä–æ–≤–Ω–∏: `{tp_levels_str}`\n"
        f"‚Ä¢ –î–æ–ª–∏: `{tp_portions_str}`\n\n"
        f"*–ê–≤—Ç–æ-–ª–∏–∫–≤–∏–¥–∞—Ü–∏—è:*\n"
        f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if s.auto_liquidation_enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞'}\n"
        f"‚Ä¢ –í—Ä–µ–º—è: `{s.auto_liquidation_time}` –ú–°–ö\n"
        f"‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞: `{s.auto_liquidation_block_minutes}` –º–∏–Ω\n"
        f"‚Ä¢ –î–Ω–∏: `{active_days}`"
    )

async def show_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    message = update.message or update.channel_post
    if not message:
        return
    await message.reply_text(_fmt_settings(), parse_mode='Markdown')

async def handle_settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã 'settings'"""
    await show_settings(update, context)

async def handle_set(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ 'set ...'"""
    message = update.message or update.channel_post
    if not message or not message.text:
        return
    
    text = message.text.strip()

    try:
        # set risk 40/30
        m = re.match(r'^set\s+risk\s+(\d+(?:\.\d+)?)\s*/\s*(\d+(?:\.\d+)?)$', text, re.IGNORECASE)
        if m:
            long_v = float(m.group(1))
            short_v = float(m.group(2))
            update_settings(risk_long_percent=long_v, risk_short_percent=short_v)
            await message.reply_text("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ:\n" + _fmt_settings(), parse_mode='Markdown')
            return

        # set risk long 35
        m = re.match(r'^set\s+risk\s+long\s+(\d+(?:\.\d+)?)$', text, re.IGNORECASE)
        if m:
            long_v = float(m.group(1))
            update_settings(risk_long_percent=long_v)
            await message.reply_text("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ:\n" + _fmt_settings(), parse_mode='Markdown')
            return

        # set risk short 25
        m = re.match(r'^set\s+risk\s+short\s+(\d+(?:\.\d+)?)$', text, re.IGNORECASE)
        if m:
            short_v = float(m.group(1))
            update_settings(risk_short_percent=short_v)
            await message.reply_text("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ:\n" + _fmt_settings(), parse_mode='Markdown')
            return

        # set sl 0.7
        m = re.match(r'^set\s+sl\s+(\d+(?:\.\d+)?)$', text, re.IGNORECASE)
        if m:
            sl = float(m.group(1))
            update_settings(stop_loss_percent=sl)
            await message.reply_text("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ:\n" + _fmt_settings(), parse_mode='Markdown')
            return

        # set tp 9
        m = re.match(r'^set\s+tp\s+(\d+(?:\.\d+)?)$', text, re.IGNORECASE)
        if m:
            tp = float(m.group(1))
            update_settings(take_profit_percent=tp)
            await message.reply_text("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ:\n" + _fmt_settings(), parse_mode='Markdown')
            return

        # –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ –¥–ª—è –º—É–ª—å—Ç–∏-TP
        
        # set multi on/off
        m = re.match(r'^set\s+multi\s+(on|off|true|false|1|0)$', text, re.IGNORECASE)
        if m:
            enabled = m.group(1).lower() in ['on', 'true', '1']
            update_settings(use_multi_tp=enabled)
            status = "–≤–∫–ª—é—á–µ–Ω" if enabled else "–≤—ã–∫–ª—é—á–µ–Ω"
            await message.reply_text(f"‚úÖ –ú—É–ª—å—Ç–∏-TP {status}\n\n" + _fmt_settings(), parse_mode='Markdown')
            return

        # set tp levels 0.5,1.0,1.6
        m = re.match(r'^set\s+tp\s+levels\s+([\d\.,\s]+)$', text, re.IGNORECASE)
        if m:
            try:
                levels_str = m.group(1).replace(" ", "")
                levels = [float(l) for l in levels_str.split(",") if l.strip()]
                if len(levels) > 0 and all(0 <= l <= 100 for l in levels):
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–æ–ª–∏ –ø–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π
                    count = len(levels)
                    base_portion = 1.0 / count
                    portions = [base_portion] * (count - 1) + [1.0 - base_portion * (count - 1)]
                    
                    update_settings(tp_levels=levels, tp_portions=portions)
                    await message.reply_text(f"‚úÖ –£—Ä–æ–≤–Ω–∏ TP –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {levels}\n–î–æ–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã\n\n" + _fmt_settings(), parse_mode='Markdown')
                    return
                else:
                    await message.reply_text("‚ùå –£—Ä–æ–≤–Ω–∏ TP –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-100%")
                    return
            except ValueError:
                await message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `set tp levels 0.5,1.0,1.6`")
                return

        # set tp portions 33,33,34
        m = re.match(r'^set\s+tp\s+portions\s+([\d,\s]+)$', text, re.IGNORECASE)
        if m:
            try:
                portions_str = m.group(1).replace(" ", "")
                portions_pct = [int(p) for p in portions_str.split(",") if p.strip()]
                
                if len(portions_pct) > 0 and sum(portions_pct) == 100:
                    portions = [p / 100.0 for p in portions_pct]
                    # –ü–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–µ–π
                    s = get_settings()
                    if len(portions) != len(s.tp_levels):
                        # –°–æ–∑–¥–∞–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
                        levels = [0.5 + i * 0.5 for i in range(len(portions))]
                        update_settings(tp_levels=levels, tp_portions=portions)
                        await message.reply_text(f"‚úÖ –î–æ–ª–∏ TP –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {portions_pct}%\n–£—Ä–æ–≤–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–æ–µ–Ω—ã\n\n" + _fmt_settings(), parse_mode='Markdown')
                    else:
                        update_settings(tp_portions=portions)
                        await message.reply_text(f"‚úÖ –î–æ–ª–∏ TP –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {portions_pct}%\n\n" + _fmt_settings(), parse_mode='Markdown')
                    return
                else:
                    await message.reply_text("‚ùå –î–æ–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏ –≤ —Å—É–º–º–µ —Ä–∞–≤–Ω—ã 100%")
                    return
            except ValueError:
                await message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `set tp portions 33,33,34`")
                return

        # –ö–û–ú–ê–ù–î–´ –¥–ª—è –∞–≤—Ç–æ-–ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        
        # set auto on/off
        m = re.match(r'^set\s+auto\s+(on|off|true|false|1|0)$', text, re.IGNORECASE)
        if m:
            enabled = m.group(1).lower() in ['on', 'true', '1']
            update_settings(auto_liquidation_enabled=enabled)
            status = "–≤–∫–ª—é—á–µ–Ω–∞" if enabled else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
            await message.reply_text(f"‚úÖ –ê–≤—Ç–æ-–ª–∏–∫–≤–∏–¥–∞—Ü–∏—è {status}\n\n" + _fmt_settings(), parse_mode='Markdown')
            return

        # set auto time 21:30
        m = re.match(r'^set\s+auto\s+time\s+(\d{1,2}):(\d{2})$', text, re.IGNORECASE)
        if m:
            hour = int(m.group(1))
            minute = int(m.group(2))
            if 0 <= hour <= 23 and 0 <= minute <= 59:
                time_str = f"{hour:02d}:{minute:02d}"
                update_settings(auto_liquidation_time=time_str)
                await message.reply_text(f"‚úÖ –í—Ä–µ–º—è –∞–≤—Ç–æ-–ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {time_str} –ú–°–ö\n\n" + _fmt_settings(), parse_mode='Markdown')
                return
            else:
                await message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM (00:00 - 23:59)")
                return

        # set auto block 45
        m = re.match(r'^set\s+auto\s+block\s+(\d+)$', text, re.IGNORECASE)
        if m:
            minutes = int(m.group(1))
            if 1 <= minutes <= 180:
                update_settings(auto_liquidation_block_minutes=minutes)
                await message.reply_text(f"‚úÖ –û–∫–Ω–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {minutes} –º–∏–Ω—É—Ç\n\n" + _fmt_settings(), parse_mode='Markdown')
                return
            else:
                await message.reply_text("‚ùå –û–∫–Ω–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 180 –º–∏–Ω—É—Ç")
                return

        # set auto days 0,1,2,3,4
        m = re.match(r'^set\s+auto\s+days\s+([0-6,\s]+)$', text, re.IGNORECASE)
        if m:
            try:
                days_str = m.group(1).replace(" ", "")
                days = [int(d) for d in days_str.split(",") if d.strip()]
                days = [d for d in days if 0 <= d <= 6]
                if days:
                    days = sorted(list(set(days)))
                    update_settings(auto_liquidation_days=days)
                    days_names = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
                    active_days = ", ".join([days_names[d] for d in days])
                    await message.reply_text(f"‚úÖ –î–Ω–∏ –∞–≤—Ç–æ-–ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏: {active_days}\n\n" + _fmt_settings(), parse_mode='Markdown')
                    return
                else:
                    await message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ (0=–ü–Ω, 1=–í—Ç, ..., 6=–í—Å)")
                    return
            except ValueError:
                await message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `set auto days 0,1,2,3,4`")
                return

        # –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∞
        await message.reply_text("‚ùì –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É.\n\n" + HELP_TEXT, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}", exc_info=True)
        await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")