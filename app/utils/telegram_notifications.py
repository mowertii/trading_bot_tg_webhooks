# app/utils/telegram_notifications.py - –ù–û–í–´–ô –§–ê–ô–õ
import asyncio
import logging
from telegram import Bot

logger = logging.getLogger(__name__)

async def send_telegram_message(bot_token: str, chat_id: str, message: str):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
    """
    try:
        bot = Bot(token=bot_token)
        await bot.send_message(chat_id=chat_id, text=message, parse_mode='HTML')
        logger.info(f"Telegram message sent to {chat_id}")
    except Exception as e:
        logger.error(f"Failed to send telegram message: {e}", exc_info=True)
        raise

async def send_trade_notification(bot_token: str, chat_id: str, 
                                 action: str, symbol: str, 
                                 status: str, details: str = ""):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    
    Args:
        action: 'buy' –∏–ª–∏ 'sell'
        symbol: —Ç–∏–∫–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞  
        status: 'started', 'success', 'error'
        details: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    """
    
    emoji_map = {
        'buy': {'started': 'üîÑ', 'success': '‚úÖ', 'error': '‚ùå'},
        'sell': {'started': 'üîÑ', 'success': '‚úÖ', 'error': '‚ùå'}
    }
    
    emoji = emoji_map.get(action, {}).get(status, 'üìä')
    action_text = action.upper()
    
    if status == 'started':
        message = f"{emoji} –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {action_text} {symbol}"
        if details:
            message += f"\n{details}"
    elif status == 'processing':
        message = f"{emoji} –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {action_text} {symbol}..."
        if details:
            message += f"\n{details}"
    elif status == 'success':
        message = f"{emoji} <b>–û–ø–µ—Ä–∞—Ü–∏—è {action_text} –¥–ª—è {symbol} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>"
        if details:
            message += f"\nüìä –î–µ—Ç–∞–ª–∏:\n{details}"
    elif status == 'error':
        message = f"{emoji} <b>–û—à–∏–±–∫–∞ {action_text} {symbol}</b>"
        if details:
            message += f"\nüîç –ü—Ä–∏—á–∏–Ω–∞: {details}"
    else:
        message = f"{emoji} {action_text} {symbol}: {status}"
        if details:
            message += f"\n{details}"
    
    await send_telegram_message(bot_token, chat_id, message)

async def send_balance_notification(bot_token: str, chat_id: str, balance: float):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–∞–ª–∞–Ω—Å–µ"""
    message = f"üí∞ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {balance:.2f} RUB"
    await send_telegram_message(bot_token, chat_id, message)

async def send_positions_notification(bot_token: str, chat_id: str, positions: list):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∑–∏—Ü–∏—è—Ö"""
    if not positions:
        message = "üìä <b>–û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç</b>"
    else:
        message = "üìä <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:</b>\n\n"
        for pos in positions:
            direction_emoji = "üìà" if pos.direction == 'long' else "üìâ"
            message += f"{direction_emoji} <b>{pos.ticker}</b>: {pos.lots} –ª–æ—Ç(–æ–≤) ({pos.direction.upper()})\n"
    
    await send_telegram_message(bot_token, chat_id, message)

async def send_close_all_notification(bot_token: str, chat_id: str, 
                                    closed_positions: int, 
                                    cancelled_orders: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""
    message = (
        f"‚úÖ <b>–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üìä –ó–∞–∫—Ä—ã—Ç–æ –ø–æ–∑–∏—Ü–∏–π: <b>{closed_positions}</b>\n"
        f"üö´ –û—Ç–º–µ–Ω–µ–Ω–æ –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: <b>{cancelled_orders.get('limit_orders', 0)}</b>\n"
        f"üõë –û—Ç–º–µ–Ω–µ–Ω–æ —Å—Ç–æ–ø-–æ—Ä–¥–µ—Ä–æ–≤: <b>{cancelled_orders.get('stop_orders', 0)}</b>"
    )
    await send_telegram_message(bot_token, chat_id, message)